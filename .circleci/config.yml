version: 2.1
commands:
  get-version:
    steps:
      - run:
          name: üîß Setting version
          command: if [[ $CIRCLE_TAG =~ v(.+)(-source) ]]; then echo "export BUILD_VERSION=v${BASH_REMATCH[1]}" >> $BASH_ENV; else echo "export BUILD_VERSION=nightly" >> $BASH_ENV; fi
  install-build-dependencies:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: ‚Üë Installing build dependencies
          command: |
            sudo apt-get update && sudo apt-get -y install git python3-dev graphviz graphviz-dev libgraphviz-dev pkg-config python3-sphinx
            pip install --user -r requirements.txt
            pip install --user -r https://raw.githubusercontent.com/FCP-INDI/C-PAC/<< parameters.version >>/requirements.txt
            pip install --user git+https://github.com/${CIRCLE_PROJECT_USERNAME}/C-PAC.git@<< parameters.version >>
            git clone https://github.com/${CIRCLE_PROJECT_USERNAME}/C-PAC.git /home/circleci/build/C-PAC
            cd /home/circleci/build/C-PAC
            git checkout << parameters.version >>
            cd /home/circleci/build
            python -m venv ~/simple
            source ~/simple/bin/activate
            pip install cpac
            deactivate
  
  run-cpac-commands:
    steps:
      - setup_remote_docker
      - run:
          name: üëä Running cpac commands
          command: |
            source ~/simple/bin/activate
            cpac pull
            mkdir -p docs/_sources/user/cpac
            printf ".. code-block:: console\n\n   $ cpac --help\n\n" > docs/_sources/user/cpac/help.rst
            cpac --help | sed -e "s/.*/   &/" >> docs/_sources/user/cpac/help.rst
            mkdir -p docs/_sources/user/run
            printf "Usage: cpac run\n\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\n.. code-block:: console\n\n   $ cpac run --help\n\n" > docs/_sources/user/run/help.rst
            cpac run --help | sed -e "s/.*/   &/" >> docs/_sources/user/run/help.rst
            mkdir -p docs/_sources/user/utils
            printf "Usage: cpac utils\n\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\n.. code-block:: console\n\n   $ cpac utils --help\n\n" > docs/_sources/user/utils/help.rst
            cpac utils --help | sed -e "s/.*/   &/" >> docs/_sources/user/utils/help.rst
            deactivate
  prep-deploy:
    steps:
      - run:
          name: ‚Üë Installing deploy dependencies
          command: sudo apt-get update && sudo apt-get -y install git rsync
      - run:
          name: üîß Configuring git user
          command: |
            git config --global user.email "ci-build@fcp-indi.github.io"
            git config --global user.name "ci-build"
      - run:
          name: üîÄ Combining new docs with existing docs
          command: |
            cd /home/circleci/build
            git clone --single-branch --branch master git@github.com:${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git /tmp/repo || git clone --single-branch --branch master git@github.com:${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git /tmp/repo
            rsync -rtv ./ /tmp/repo/ --exclude '.git'
      - run:
          name: üìë Generating list of versions
          command: python /home/circleci/build/scripts/version_list.py /tmp/repo/docs
  deploy:
    steps:
      - run:
          name: üöÄ Deploying docs
          command: |
            cd /tmp/repo
            git rm -f .gitignore || rm -f .gitignore || true
            git add .
            git rm -fr docs/_sources || rm -fr docs/_sources || true
            git rm -fr docs/**/_sources || rm -fr docs/**/_sources || true
            git rm -fr docs/.doctrees || rm -fr docs/.doctrees || true
            git rm -fr docs/**/.doctrees || rm -fr docs/**/.doctrees || true
            git rm -fr bin || rm -fr bin || true
            git rm -fr C-PAC || rm -fr C-PAC || true
            git rm -fr cpac || rm -fr cpac || true
            git rm -fr scripts/__pycache__ || rm -fr scripts/__pycache__ || true
            git commit -m "$(cat /home/circleci/GITMESSAGE.txt)" --allow-empty
            git push origin HEAD:master -f
            cd -
  store-commit-message:
    steps:
      - run:
          name: üìë Storing commit message
          command: if [[ $CIRCLE_TAG =~ v(.+)(-source) ]]; then git fetch origin --tags; git log ${CIRCLE_TAG} -1 --oneline --pretty=%s > /home/circleci/GITMESSAGE.txt; else git log origin/${CIRCLE_BRANCH} -1 --oneline --pretty=%s > /home/circleci/GITMESSAGE.txt; fi

  persist-new-build:
    steps:
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - build/404.html
            - build/docs
            - build/index.html
            - build/scripts
            - .ssh
            - GITMESSAGE.txt

jobs:
  build-nightly:
    working_directory: /home/circleci/build
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout:
          path: /home/circleci/build
      - install-build-dependencies:
          version: develop
      - run-cpac-commands
      - run:
          name: üèóÔ∏è Building nightly branch docs
          command: ./bin/build nightly
      - store-commit-message
      - persist-new-build
  build-version:
    working_directory: /home/circleci/build
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout:
          path: /home/circleci/build
      - get-version
      - install-build-dependencies:
          version: ${BUILD_VERSION}
      - run-cpac-commands
      - run:
          name: üèóÔ∏è Building version branch docs
          command: ./bin/build ${BUILD_VERSION}
      - store-commit-message
      - persist-new-build
  deploy-nightly:
    working_directory: /home/circleci/
    docker:
      - image: cimg/python:3.7
    steps:
      - attach_workspace:
          at: /home/circleci/
      - prep-deploy
      - deploy
  deploy-version:
    working_directory: /home/circleci/
    docker:
      - image: cimg/python:3.7
    steps:
      - attach_workspace:
          at: /home/circleci/
      - get-version
      - prep-deploy
      - run:
          name: üîó Replace links to `FCP-INDI/master` with versioned links
          command: |
            cd /tmp/repo/
            python scripts/link_to_set_version.py ${BUILD_VERSION}
      - run:
          name: üîñ Checking if latest
          command: |
            source $BASH_ENV
            if $(python /home/circleci/build/scripts/is_latest.py /tmp/repo/docs); then rm -rf /tmp/repo/docs/latest && cp -r /home/circleci/build/docs/${BUILD_VERSION} /tmp/repo/docs/latest; fi
      - deploy

workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      - build-nightly:
          filters:
            branches:
              only: source
      - build-version:
          filters:
            tags:
              only: /^v.*(-source)$/
            branches:
              ignore: /.*/
      - deploy-nightly:
          filters:
            branches:
              only: source
          requires:
            - build-nightly
      - deploy-version:
          filters:
            tags:
              only: /^v.*(-source)$/
            branches:
              ignore: /.*/
          requires:
            - build-version
